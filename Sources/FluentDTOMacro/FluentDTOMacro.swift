import FluentDTOMacroShared

/**
  A macro that generates a `...DTO` struct as a peer to your Fluent model (class or struct) and
  an extension that adds a `toDTO()` method returning the generated struct.

  ### Parameters

  - **immutable**:
  If `true`, the generated `DTO` struct uses `let` for its stored properties.
  If `false`, it uses `var`. Defaults to `true`.

  - **includeRelations**:
  Specifies which Fluent relationships should be transformed into nested DTOs.
  Relationship wrappers (such as `@Children`, `@Parent`, etc.) generate nested `...DTO` types.
  Normal fields (e.g., `@Field`, `@ID`) are always included unless explicitly ignored with `@FluentDTOIgnore`.
  Defaults to `.all`.

  - **accessLevel**:
  The desired access level for the generated `DTO` struct and `toDTO()` method.
  Defaults to `.public`, but you can specify `.internal`, `.fileprivate`, or `.private` to restrict visibility.

  - **conformances**:
  The protocols that the generated DTO should conform to.
  Defaults to all available protocols (Equatable, Hashable, Sendable).

  ### Usage Example

  ```swift
  @FluentDTO(
     immutable: true,
     includeRelations: .children,
     accessLevel: .public
  )
  public final class User: Model {
     @ID(key: .id) public var id: UUID?
     @Field(key: "username") public var username: String
     @Children(for: \.$user) var posts: [Post]
  }

  // The macro auto-generates:
 public struct UserDTO: Equatable { ... }
 extension User { public func toDTO() -> UserDTO { ... } }
  */
@attached(peer, names: suffixed(DTO))
@attached(extension, names: named(toDTO))
public macro FluentDTO(
    /// If `true`, the generated `DTO` struct uses `let` instead of `var`.
    immutable: Bool = FluentDTODefaults.immutable,
    /// Specifies which Fluent relationships to include in the generated DTO.
    includeRelations: IncludeRelations = FluentDTODefaults.includeRelations,
    /// The desired access level for the generated `DTO` struct and `toDTO()` method.
    accessLevel: AccessLevel = FluentDTODefaults.accessLevel,
    /// The protocols that the generated DTO should conform to.
    /// Defaults to all available protocols (Equatable, Hashable, Sendable).
    conformances: DTOConformances = FluentDTODefaults.conformances
) = #externalMacro(
    module: "FluentDTOMacroPlugin",
    type: "FluentDTOMacro"
)

/**
 A macro that excludes a property from the `...DTO` struct generated by `@FluentDTO`.
 Useful for fields that should not be exposed, such as IDs, passwords, or tokens.

 ### Example

 ```swift
 public final class User: Model {
    @ID(key: .id) public var id: UUID?

    @FluentDTOIgnore
    @Field(key: "password_hash") public var passwordHash: String

    @Field(key: "username") public var username: String
 }
 */
@attached(accessor)
public macro FluentDTOIgnore() = #externalMacro(
    module: "FluentDTOMacroPlugin",
    type: "FluentDTOIgnoreMacro"
)
